NODEJS_ROOT=$NODEJS_RESOURCE_GLOBAL
NODEJS_BIN=$NODEJS_ROOT/node
PNPM_ROOT=$PNPM_RESOURCE_GLOBAL
PNPM_SCRIPT=$PNPM_ROOT/pnpm.js
TSC_ROOT=$TS_COMPILER_RESOURCE_GLOBAL/typescript
TSC_SCRIPT=$TSC_ROOT/lib/tsc.js
WEBPACK_ROOT=$WEBPACK_RESOURCE_GLOBAL/node_modules
WEBPACK_SCRIPT=$WEBPACK_ROOT/.bin/webpack
ESLINT_ROOT=$ESLINT_RESOURCE_GLOBAL
ESLINT_SCRIPT=$ESLINT_ROOT/node_modules/.bin/eslint
ESLINT_CONFIG_NAME=.eslintrc.js
HERMIONE_ROOT=$HERMIONE_RESOURCE_GLOBAL
HERMIONE_SCRIPT=$HERMIONE_ROOT/node_modules/.bin/hermione

NOTS_TOOL=${tool:"tools/nots"}
NOTS_TOOL_CURDIR=$CURDIR
NOTS_TOOL_BINDIR=$BINDIR
NOTS_TOOL_BASE_ARGS=--build-root $ARCADIA_BUILD_ROOT --bindir $NOTS_TOOL_BINDIR --curdir $NOTS_TOOL_CURDIR --nodejs-bin $NODEJS_BIN
NOTS_TOOL_NODE_MODULES_BUNDLE=$BINDIR/$NODE_MODULES_BUNDLE

#
# npm contribs
#

NPM_CONTRIBS_PATH=build/platform/yandex_specific/ts/contribs

### @usage: NPM_CONTRIBS() # internal
###
### Defines special module that provides contrib tarballs from internal npm registry.
### Should be used only with `NODE_MODULES` macro.
###
### @see [FROM_NPM_LOCKFILES()](#macro_FROM_NPM_LOCKFILES)
### @see [NODE_MODULES()](#macro_NODE_MODULES)
module NPM_CONTRIBS: _BASE_UNIT {
    .CMD=TOUCH_UNIT
    .PEERDIR_POLICY=as_build_from
    .FINAL_TARGET=no
    .ALLOWED=FROM_NPM_LOCKFILES
    .RESTRICTED=PEERDIR

    SET(MODULE_TAG NPM_CONTRIBS)

    MODULE_SUFFIX=.fake

    _BARE_MODULE()
}

### @usage: FROM_NPM_LOCKFILES(LOCKFILES...) # internal
###
### Defines lockfile list for `NPM_CONTRIBS` module.
###
### @see [NPM_CONTRIBS()](#module_NPM_CONTRIBS)
macro FROM_NPM_LOCKFILES(LOCKFILES...) {
    SET_APPEND(_MAKEFILE_INCLUDE_LIKE_DEPS $LOCKFILES)
    # See implementation in build/plugins/nots.py
    _FROM_NPM_LOCKFILES($LOCKFILES)
}

### @usage: FROM_NPM(NAME VERSION SKY_ID INTEGRITY INTEGRITY_ALGO TARBALL_PATH)
macro FROM_NPM(NAME, VERSION, SKY_ID, INTEGRITY, INTEGRITY_ALGO, TARBALL_PATH) {
    .CMD=${cwd:BINDIR} $YMAKE_PYTHON ${input:"build/scripts/fetch_from_npm.py"} ${input;hide:"build/scripts/fetch_from.py"} ${input;hide:"build/scripts/sky.py"} --name $NAME --version $VERSION --sky-id $SKY_ID --integrity $INTEGRITY --integrity-algorithm $INTEGRITY_ALGO --copy-to ${output:TARBALL_PATH} ${requirements;hide:"network:full"} ${kv;hide:"p NP"} ${kv;hide:"pc yellow"}
}

#
# node_modules
#

NODE_MODULES_BINDIR=$BINDIR
NODE_MODULES_BUNDLE=node_modules.tar
NODE_MODULES_BUNDLE_AS_OUTPUT=

### @usage: NODE_MODULES()
###
### Materializes `node_modules.tar` bundle according to the module's lockfile.
###
### @see [NPM_CONTRIBS()](#module_NPM_CONTRIBS)
macro NODE_MODULES() {
    # See implementation in build/plugins/nots.py
}

macro _NODE_MODULES(IN{input}[], OUT{output}[]) {
    PEERDIR($NPM_CONTRIBS_PATH)
    SET(NODE_MODULES_BUNDLE_AS_OUTPUT \${output;hide:"workspace_node_modules.tar"})

    .CMD=${cwd:NODE_MODULES_BINDIR} $NOTS_TOOL create-node-modules $NOTS_TOOL_BASE_ARGS --bindir $NODE_MODULES_BINDIR --pnpm-script $PNPM_SCRIPT --contribs $NPM_CONTRIBS_PATH ${input;hide:IN} ${output;hide:OUT} ${kv;hide:"p NM"} ${kv;hide:"pc yellow"}
}

#
# TS library
#

module _TS_BASE_UNIT: _BASE_UNIT {
    SET(MODULE_TAG TS)
    SET(PEERDIR_TAGS TS NPM_CONTRIBS)

    PEERDIR(build/platform/nodejs)
    PEERDIR(build/external_resources/pnpm)
    PEERDIR(build/external_resources/typescript)
    PEERDIR(build/external_resources/eslint)

    MODULE_SUFFIX=.fake

    _BARE_MODULE()
}

TS_CONFIG_PATH=tsconfig.json
TS_COMPILE_OUTPUT=
TS_COMPILE=${cwd:BINDIR} $NOTS_TOOL compile-ts $NOTS_TOOL_BASE_ARGS --tsc-script $TSC_SCRIPT --config ${CURDIR}/${TS_CONFIG_PATH} --node-modules-bundle $NOTS_TOOL_NODE_MODULES_BUNDLE $NODE_MODULES_BUNDLE_AS_OUTPUT ${hide:PEERS} ${output;hide:TS_COMPILE_OUTPUT} ${kv;hide:"p FE"} ${kv;hide:"pc yellow"} && $TOUCH_UNIT

module _TS_BASE_LIBRARY : _TS_BASE_UNIT {
    .CMD=TS_COMPILE
    .FINAL_TARGET=yes
    .PEERDIR_POLICY=as_build_from

    SET_APPEND(_MAKEFILE_INCLUDE_LIKE_DEPS ${CURDIR}/${TS_CONFIG_PATH} ${CURDIR}/package.json)
    SET(TS_CONFIG_DEDUCE_OUT yes)

    _TS_CONFIGURE($TS_CONFIG_PATH)
}

### @usage: TS_LIBRARY([name])
###
### The TypeScript/JavaScript library module, compiles TypeScript sources to JavaScript.
### Build results are JavaScript files, typings and source mappings (depending on local tsconfig.json settings).
###
### @see [NODE_MODULES()](#macro_NODE_MODULES)
### @example
###
###     TS_LIBRARY()
###         SRCS(src/index.ts)
###         NODE_MODULES()
###     END()
###
module TS_LIBRARY : _TS_BASE_LIBRARY {
    .EPILOGUE=_TS_LIBRARY_EPILOGUE

    # Add package.json to output since it is required for CommonJS/ESM and typings resolving.
    SET(TS_COMPILE_OUTPUT package.json)
}

#
# TS bundle
#

WEBPACK_CONFIG_PATH=webpack.config.js
TS_BUNDLE_WEBPACK=${cwd:BINDIR} $NOTS_TOOL bundle-webpack $NOTS_TOOL_BASE_ARGS --webpack-resource $WEBPACK_ROOT --webpack-script $WEBPACK_SCRIPT --webpack-config ${input:WEBPACK_CONFIG_PATH} --ts-config ${input:TS_CONFIG_PATH} --node-modules-bundle $NOTS_TOOL_NODE_MODULES_BUNDLE $NODE_MODULES_BUNDLE_AS_OUTPUT ${hide:PEERS} ${output;hide:"bundle.tar"} ${kv;hide:"p FE"} ${kv;hide:"pc yellow"} && $TOUCH_UNIT

### @usage: TS_BUNDLE([name])
###
### The Webpack bundle, bundles JavaScript code.
### Build results are bundle.tar, typings and source mappings (depending on local tsconfig.json settings).
###
### @see [NODE_MODULES()](#macro_NODE_MODULES)
### @example
###
###     TS_BUNDLE()
###         SRCS(src/index.ts)
###         NODE_MODULES()
###     END()
###
module TS_BUNDLE : _TS_BASE_UNIT {
    .CMD=TS_BUNDLE_WEBPACK
    .FINAL_TARGET=yes
    .PEERDIR_POLICY=as_build_from

    PEERDIR(build/external_resources/webpack)
    SET_APPEND(_MAKEFILE_INCLUDE_LIKE_DEPS ${CURDIR}/${TS_CONFIG_PATH} ${CURDIR}/${WEBPACK_CONFIG_PATH} ${CURDIR}/package.json)
    SET(TS_CONFIG_DEDUCE_OUT no)

    _TS_CONFIGURE($TS_CONFIG_PATH)
}

#
# TS library testing
#

JEST_CONFIG_PATH=jest.config.js

# tag:test
_TS_TEST_SRCS_VALUE=
## @usage: TS_TEST_SRCS(DIR)
macro TS_TEST_SRCS(DIR) {
    _GLOB(_TS_TEST_SRCS_VALUE $DIR/**/*.test.ts)

    SRCS($_TS_TEST_SRCS_VALUE)
}

# tag:test
_TS_LINT_SRCS_VALUE=
### _TS_LIBRARY_EPILOGUE() # internal
###
### This macro executes macros which should be invoked after all user specified macros in the ya.make file
macro _TS_LIBRARY_EPILOGUE() {
    _GLOB(_TS_LINT_SRCS_VALUE ${CURDIR}/**/*.(ts|tsx) EXCLUDE **/node_modules/**/*.(ts|tsx))
}

### @usage: TS_TEST()
# tag:test
module TS_TEST: _TS_BASE_LIBRARY {
    # Disable `SRCS` macro in "parent" module (sources will be added by `TS_TEST_SRCS`).
    .ALIASES=SRCS=_NOOP_MACRO

    # Use "parent's" CURDIR/BINDIR since TS_TEST borrows sources from parent module.
    SET(TEST_FOR_BINDIR $ARCADIA_BUILD_ROOT/$TS_TEST_FOR_PATH)
    SET(TEST_FOR_CURDIR $ARCADIA_ROOT/$TS_TEST_FOR_PATH)
    SET(NOTS_TOOL_CURDIR $TEST_FOR_CURDIR)
    SET(NOTS_TOOL_NODE_MODULES_BUNDLE $TEST_FOR_BINDIR/$NODE_MODULES_BUNDLE)
    SET(NODE_MODULES_BINDIR $TEST_FOR_BINDIR)
    SET_APPEND(_MAKEFILE_INCLUDE_LIKE_DEPS ${CURDIR}/${JEST_CONFIG_PATH})

    PEERDIR(build/external_resources/jest)

    _TS_TEST_CONFIGURE($JEST_CONFIG_PATH)
}

HERMIONE_CONFIG_PATH=.hermione.conf.js

# tag:test
### @usage: HERMIONE_TEST([name])
###
### Integration test module based on https://github.com/gemini-testing/hermione
module HERMIONE_TEST: _TS_BASE_UNIT {
    PEERDIR(build/external_resources/hermione)

    SET_APPEND(_MAKEFILE_INCLUDE_LIKE_DEPS ${CURDIR}/${HERMIONE_CONFIG_PATH})

    _HERMIONE_CONFIGURE($HERMIONE_CONFIG_PATH)
}

# tag:test
_HERMIONE_SRCS_VALUE=
### @usage: HERMIONE_SRCS(Dirs...)
###
### Specify paths to directories where tests with the extensions: ".hermione.ts" or ".hermione.js" will be searched.
macro HERMIONE_SRCS(DIRS...) {
    _GLOB(_HERMIONE_SRCS_VALUE ${suf=/**/*.hermione.(ts|js):DIRS} EXCLUDE **/node_modules/**)
}
